#include <stdio.h>
#include <string.h>

#include "sstcp.h"

// 服务器端客户端处理函数
void handle_client(int client_socket) {
    char buffer[1024] = {0};
    const char *hello = "Hello from server";

    // 读取客户端数据
    int valread = recv(client_socket, buffer, 1024, 0);
    if (valread > 0) {
        printf("Received: %s\n", buffer);

        // 发送响应
        send(client_socket, hello, strlen(hello), 0);
        printf("Hello message sent to client\n");
    } else {
        perror("recv failed");
    }
}

int main(int argc, char const *argv[]) {
    // 启动服务器
    sstcp_server_t *server = sstcp_create_server(8080);
    if (!server) {
        fprintf(stderr, "Failed to create server\n");
        return 1;
    }

    // 启动服务器线程
    if (sstcp_start_server(server, handle_client) != 0) {
        fprintf(stderr, "Failed to start server\n");
        sstcp_free_server(server);
        return 1;
    }

    // 创建客户端并连接到服务器
    sstcp_client_t *client = sstcp_create_client();
    if (!client) {
        fprintf(stderr, "Failed to create client\n");
        sstcp_stop_server(server);
        sstcp_free_server(server);
        return 1;
    }

    if (sstcp_connect(client, "127.0.0.1", 8080) != 0) {
        fprintf(stderr, "Failed to connect to server\n");
        sstcp_free_client(client);
        sstcp_stop_server(server);
        sstcp_free_server(server);
        return 1;
    }

    // 发送数据
    const char *message = "Hello from client";
    sstcp_send(client, message, strlen(message));

    // 接收数据
    char buffer[1024] = {0};
    sstcp_receive(client, buffer, 1024);
    printf("Received from server: %s\n", buffer);

    // 关闭客户端
    sstcp_close_client(client);
    sstcp_free_client(client);

    // 停止服务器
    sstcp_stop_server(server);
    sstcp_free_server(server);

    return 0;
}